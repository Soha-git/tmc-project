---  
stages:
  - lint
  - build
  - Test
  - notify
  - helm
  - deploy

.helm:
  image: dtzar/helm-kubectl:3.8
  before_script:
    - helm plugin install https://github.com/chartmuseum/helm-push
    - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
    - helm repo add --username gitlab-ci-token --password $CI_JOB_TOKEN project-1 "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable"



# Hadolint:lint:
#   stage: lint
#   image: hadolint/hadolint:v2.9.2-alpine
#   script:
#     - hadolint dockerfile
# Golint:lint:
#   stage: lint
#   image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
#   script:
#     - golangci-lint run 
# Helmlint:lint:
#   stage: lint
#   extends: .helm
#   script:
#     - helm lint ${CI_PROJECT_DIR}/k8s/app-dev-golang


# BaseImage:build:
#   stage: build
#   #needs: ["Hadolint:lint"]
#   image:
#     name: gcr.io/kaniko-project/executor:debug
#     entrypoint: [""]
#   script:
#     - mkdir -p /kaniko/.docker
#     - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
#     - >-
#       /kaniko/executor
#       --cache=true --context "${CI_PROJECT_DIR}"
#       --dockerfile "${CI_PROJECT_DIR}/build/base-images/dockerfile"
#       --destination "${CI_REGISTRY_IMAGE}:base-0.1"


# AppImage:build:
#   stage: build
#   # needs: 
#   #   - "Hadolint:lint"
#   #   - "Golint:lint"
#   image:
#     name: gcr.io/kaniko-project/executor:debug
#     entrypoint: [""]
#   script:
#     - mkdir -p /kaniko/.docker
#     - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
#     - >-
#       /kaniko/executor
#       --cache=true --context "${CI_PROJECT_DIR}"
#       --dockerfile "${CI_PROJECT_DIR}/build/base-images/dockerfile"
#       --destination "${CI_REGISTRY_IMAGE}:$CI_COMMIT_TAG"    
#   after_script:
#     - $CI_JOB_STATUS 

Success_emails:
  stage: notify
  image: 
    name: alpine:latest
  variables:
    MESSAGE:
    |
      ✅ Success build \*$CI_PROJECT_NAME:$CI_COMMIT_BRANCH\*
      $CI_COMMIT_TITLE

      Commit by: \*$CI_COMMIT_AUTHOR\*
      $CI_PIPELINE_URL
  script:
    - apk --no-cache add curl
    - sh ./ci-notify.sh
  rules:
    - if: '$CI_JOB_STAGE == "build"'
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_BRANCH == "master"
    - if: $CI_JOB_STAGE == "deploy" 
Failed_emails:
  stage: notify
  image: 
    name: alpine:3.14
  variables:
    MESSAGE: |
      ❌ Error build \*$CI_PROJECT_NAME:$CI_COMMIT_BRANCH\*
      $CI_COMMIT_TITLE

      Commit by: \*$CI_COMMIT_AUTHOR\*
      $CI_PIPELINE_URL
  script:
    - apk --no-cache add curl
    - sh ./ci-notify.sh
  rules:
    - if: '$CI_JOB_STAGE == "build"'
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_BRANCH == "master"
    - if: $CI_JOB_STAGE == "deploy" 
      when: on_failure
# TestServer|Test:
#   stage: Test 
#   image: tetafro/golang-gcc:1.17-alpine
#   script:
#     - go test -v ./test/server_test.go 

# TestRequest|Test:
#   stage: Test
#   image: tetafro/golang-gcc:1.17-alpine
#   services:
#     - name: '${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}'
#       alias: server
#   script:
#     - go test -v ./test/request_test.go 

# HelmPackage:build:
#   stage: build
#   extends: .helm
#   needs: ["Helmlint:lint"]
#   script:
#     - helm package ${CI_PROJECT_DIR}/k8s/app-dev-golang 
#     - helm cm-push app-golang-chart-0.1.0.tgz project-1

# Prometheus:Helm:
#   stage: helm
#   extends: .helm
#   tags:
#     - k8s
#   script:
#     - helm install --namespace prometheus --create-namespace stable prometheus-community/kube-prometheus-stack



k8s_deploy:deploy:
  stage: deploy
  extends: .helm
  tags:
    - k8s
  script:
    - helm upgrade --install --namespace app-dev --create-namespace app-dev project-1/app-golang-chart
  only:
    - main
    - master   
  



