---  
stages:
  - lint
  - build
  - Test
  - release
  - staging
  - deploy


variables:
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

.helm:
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  before_script:
    - helm repo add --username gitlab-ci-token --password $CI_JOB_TOKEN project-1 "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable"

# #### Lint ####
# Hadolint:lint:
#   stage: lint
#   image: hadolint/hadolint:v2.9.2-alpine
#   script:
#     - hadolint ${CI_PROJECT_DIR}/build/base-images/Dockerfile
#     - hadolint dockerfile
#   except:
#     - main
#     - master

# Golint:lint:
#   stage: lint
#   image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
#   script:
#     - golangci-lint run 
#   except:
#     - main
#     - master

# Helmlint:lint:
#   stage: lint
#   image: dtzar/helm-kubectl:3.8
#   before_script:
#     - helm repo add --username gitlab-ci-token --password $CI_JOB_TOKEN project-1 "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable"
#   script:
#     - helm lint ${CI_PROJECT_DIR}/k8s/app-dev-golang
#   except:
#     - main
#     - master

# #### Build ####
BaseImage:build:
  stage: build
  #needs: ["Hadolint:lint"]
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --cache=true --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/build/base-images/Dockerfile"
      --destination "BaseImage:$CI_BUILD_REF"
  except:
    - main
    - master

AppImage:build:
  stage: build
  needs: 
    - "BaseImage:build"
  #   - "Hadolint:lint"
  #   - "Golint:lint"
  image:
    name: BaseImage:$CI_BUILD_REF
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      kaniko
      --cache=true --context "${CI_PROJECT_DIR}" 
      --dockerfile "${CI_PROJECT_DIR}/dockerfile"
      --destination $CONTAINER_IMAGE
  except:
    - main
    - master
  after_script:
    - if [ ${CI_JOB_STATUS} == "success" ]; then EXIT_STATUS=0; else  EXIT_STATUS=1; fi
    - source ./ci-notify.sh; share_slack_update_build

# HelmPackage:build:
#   stage: build
#   extends: .helm
#   needs: 
#     - "Helmlint:lint"
#     - "BaseImage:build"
#   script:
#     - helm package ${CI_PROJECT_DIR}/k8s/app-dev-golang
#     - helm cm-push app-golang-chart-0.1.0.tgz project-1
#   except:
#     - main
#     - master

# #### Test ######

TestServer|TestImage:
  stage: Test 
  image: tetafro/golang-gcc:1.17-alpine
  needs:
    - "AppImage:build"
  services:
    - name: '${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}'
      alias: server
  script:
    - go test -v ./test/server_test.go 
  except:
    - main
    - master

TestRequest|TestImage:
  stage: Test
  image: tetafro/golang-gcc:1.17-alpine
  needs:
    - "AppImage:build"
  services:
    - name: '${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}'
      alias: server
  script:
    - go test -v ./test/request_test.go 
  except:
    - main
    - master

# ###### Release ######

release-image-main:
  stage: release
  image: docker:19.03.12
  services:
  - docker:19.03.12-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CONTAINER_IMAGE
    - docker tag $CONTAINER_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  only:
    - master
    - main
after_script:
    - if [ ${CI_JOB_STATUS} == "success" ]; then EXIT_STATUS=0; else  EXIT_STATUS=1; fi
    - source ./ci-notify.sh; share_slack_update_build


# Prometheus:Helm:
#   stage: staging
#   extends: .helm
#   tags:
#     - stages
#   script:
#     - helm install --namespace prometheus --create-namespace stable prometheus-community/kube-prometheus-stack


.helm_auth: &helm_auth
  - helm repo add --username gitlab-ci-token --password $CI_JOB_TOKEN project-1 "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable"


.prod_deploy:
  image: dtzar/helm-kubectl:3.8
  before_script: *helm_auth
  tags:
    - prod
  script:
    - helm upgrade --install --namespace app-dev --create-namespace app-dev project-1/app-golang-chart  
  after_script:
    - if [ ${CI_JOB_STATUS} == "success" ]; then EXIT_STATUS=0; else  EXIT_STATUS=1; fi
    - source ./ci-notify.sh; share_slack_update_build

.staging_deploy:
  image: dtzar/helm-kubectl:3.8
  before_script: *helm_auth
  tags:
    - stages
  script:
    - helm upgrade --install --namespace app-dev --create-namespace app-dev project-1/app-golang-chart  
  after_script:
    - if [ ${CI_JOB_STATUS} == "success" ]; then EXIT_STATUS=0; else  EXIT_STATUS=1; fi
    - source ./ci-notify.sh; share_slack_update_build

# deploy to staging:
#   <<: *staging_deploy
#   when: manual
#   except:
#     - master
#     - main

# deploy to production:
#   <<: *prod_deploy
#   when: manual
#   only:
#     - master
#     - main




