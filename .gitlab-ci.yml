---  
stages:
  - version
  - lint
  - build
  - test
  - release
  - staging
  - deploy



.helm:
  image: dtzar/helm-kubectl:3.8
  before_script:
    - helm plugin install https://github.com/chartmuseum/helm-push 
    - helm repo add --username gitlab-ci-token --password $CI_JOB_TOKEN Helm-chart "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable"
    # - helm repo add grafana https://grafana.github.io/helm-charts
    - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts


version:
  stage: version
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - release next-version --allow-current > .next-version
  artifacts:
    paths:
    - .next-version
  except:
    - tags

#-------------------------------------------- Lint---------------------------------------------------#
# Hadolint:lint:
#   stage: lint
#   image: hadolint/hadolint:v2.9.2-alpine
#   script:
#     - hadolint dockerfile
#   except:
#     - main
#     - master

# Golint:lint:
#   stage: lint
#   image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
#   script:
#     - golangci-lint run 
#   except:
#     - main
#     - master

# Helmlint:lint:
#   stage: lint
#   image: dtzar/helm-kubectl:3.8
#   script:
#     - helm lint ${CI_PROJECT_DIR}/k8s/hello-golang
#   except:
#     - main
#    - master

#------------------------- Build --------------------------------------------------------#
# AppImage:build:
#   stage: build
#   needs: 
#     - "version"
#     # - "Hadolint:lint"
#     # - "Golint:lint"
#   image:
#     name: gcr.io/kaniko-project/executor:debug
#     entrypoint: [""]
#   script:
#     - tag=`cat .next-version`
#     - mkdir -p /kaniko/.docker
#     - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
#     - >-
#       /kaniko/executor
#       --cache=true --context "${CI_PROJECT_DIR}" 
#       --dockerfile "./dockerfile"
#       --destination ${CI_REGISTRY_IMAGE}:v$tag
#     - echo "RELEASE_URL=https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts/release" > build_info
#     - echo "RELEASE_SHA=$CI_COMMIT_SHA" >> build_info
#     - echo "RELEASE_VERSION=`cat .next-version`" >> build_info  
#   artifacts:
#     paths: 
#     - build_info
#   except:
#     - main
#    - master

AppImage:build:
  stage: build
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  services:
  - docker:dind
  script:
  - tag=`cat .next-version`
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  - docker build --cache-from ${CI_REGISTRY_IMAGE}:latest -t ${CI_REGISTRY_IMAGE}:v$tag .
  - docker push ${CI_REGISTRY_IMAGE}:v$tag
  - echo "RELEASE_URL=https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts/release" > build_info
  - echo "RELEASE_DESC=\"$(uname -mo) binary\"" >> build_info
  - echo "RELEASE_SHA=$CI_COMMIT_SHA" >> build_info
  - echo "RELEASE_VERSION=$(<.next-version)" >> build_info
  artifacts:
    paths:
    - build_info
  except:
  - main
  - master
  - tags
  after_script:
    - if [ ${CI_JOB_STATUS} == "passed" ]; then EXIT_STATUS=0; else  EXIT_STATUS=1; fi
    - source ./ci-notify.sh; share_slack_update_build


# HelmPackage:build:
#   stage: build
#   extends: .helm
#   needs: 
#     - "version"
#     - "Helmlint:lint"
#   script:
#     - chartVersion=`cat .next-version`
#     - helm package ${CI_PROJECT_DIR}/k8s/hello-golang --version "$chartVersion"
#     - helm cm-push hello-golang-chart-$chartVersion.tgz Helm-chart
#   except:
#     - main
#     - master

#---------------------------------------Test----------------------------------------------#
# .go-test: &go-test
#   stage: test
#   image: tetafro/golang-gcc:1.17-alpine
#   needs:
#     - "AppImage:build"
#   services:
#     - name: '${CI_REGISTRY_IMAGE}:v$RELEASE_VERSION'
#       alias: server  

# TestServer:TestImage:
#   <<: *go-test
#   script:
#     - go test -v ./test/server_test.go 
#   except:
#     - main
#     - master

# TestRequest:TestImage:
#   <<: *go-test
#   script:
#     - go test -v ./test/request_test.go 
#   except:
#     - main
#     - master

# #------------------------------------------Release----------------------------------------------#
release:
  stage: release
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  services:
  - docker:dind
  script:
  - RELEASE_VERSION=`cat .next-version`
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  - docker pull ${CI_REGISTRY_IMAGE}:v$RELEASE_VERSION
  - docker tag ${CI_REGISTRY_IMAGE}:v$RELEASE_VERSION $CI_REGISTRY_IMAGE:latest
  - docker push $CI_REGISTRY_IMAGE:latest
  
  - ./release -v
  - ./release changelog
  - ./release commit-and-tag CHANGELOG.md release_info
  - ./release --ci-commit-tag v$RELEASE_VERSION
  only:
  - main
  - master

#----------------------------------------------- Monitoring install ------------------------------------#
Prometheus:Staging:
  stage: staging
  needs: []
  extends: .helm
  tags:
    - prod
  script:
    - helm upgrade --install --namespace monitoring --create-namespace monitoring -f ${CI_PROJECT_DIR}/k8s/monitoring/alertmanager.yaml prometheus-community/kube-prometheus-stack
  except:
    - main
    - master

#-------------------------------------------- Deploy ---------------------------------------------------#
.helm_auth: &helm_auth
  - helm repo add --username gitlab-ci-token --password $CI_JOB_TOKEN Helm-chart "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable"


.prod_deploy: &prod_deploy
  image: dtzar/helm-kubectl:3.8
  stage: deploy
  before_script: *helm_auth
  tags:
    - prod
  script:
    - helm upgrade --install --namespace prod --create-namespace hello-golang Helm-chart/hello-golang-chart

.staging_deploy: &staging_deploy
  image: dtzar/helm-kubectl:3.8
  stage: staging
  needs: 
    - 'TestRequest:TestImage'
    - 'TestServer:TestImage'
    - 'HelmPackage:build'
    - 'Prometheus:Staging'
  before_script: *helm_auth
  tags:
    - dev
  script:
    - helm upgrade --install --namespace dev --create-namespace hello-golang Helm-chart/hello-golang-chart 

# # deploy to staging:
# #   <<: *staging_deploy
# #   when: manual
# #   except:
# #     - master
# #     - main

# deploy to production:
#   <<: *prod_deploy
#   when: manual
#   only:
#     - master
#     - main




